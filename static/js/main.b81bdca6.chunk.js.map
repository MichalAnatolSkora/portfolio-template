{"version":3,"sources":["serviceWorker.ts","index.tsx","WOLFGEO.jpg"],"names":["Boolean","window","location","hostname","match","Fullpage","scrollingSpeed","navigation","render","state","fullpageApi","baseStyle","textAlign","Wrapper","className","style","backgroundColor","src","wolf","height","verticalAlign","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DCMAC,EAAW,kBACf,kBAAC,IAAD,CAGEC,eAAgB,IAChBC,YAAY,EACZC,OAAQ,YAAiC,EAA9BC,MAA8B,EAAvBC,YAAwB,IACpCC,EAAiC,CAAEC,UAAW,UAMlD,OACE,kBAAC,IAAcC,QAAf,KACE,yBAAKC,UAAU,UAAUC,MAAK,2BAAOJ,GAAP,IAAkBK,gBAAiB,aAEjE,yBAAKF,UAAU,wBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,SACb,yBAAKG,IAAKC,IAAMC,OAAO,WAEzB,yBAAKL,UAAU,QAAQC,MAAO,CAACK,cAAe,WAI5C,yBAAKN,UAAU,4CACP,yBAAKA,UAAU,SACX,yBAAKA,UAAU,OAAf,MAEJ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,OAAf,MAEJ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,OAAf,WAYlB,yBAAKA,UAAU,UAAUC,MAAK,2BAAOJ,GAAP,IAAkBK,gBAAiB,aAC/D,yBAAKF,UAAU,SAAf,aACA,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,SAAf,mBAQZO,IAASb,OAAO,kBAAC,EAAD,MAAcc,SAASC,eAAe,SD0DhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.b81bdca6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primeflex/primeflex.css';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport ReactFullpage from '@fullpage/react-fullpage';\r\nimport { Card } from 'primereact/card';\r\nimport wolf from './WOLFGEO.jpg';\r\n\r\nconst Fullpage = () => (\r\n  <ReactFullpage\r\n    //fullpage options\r\n    // licenseKey = {'YOUR_KEY_HERE'}\r\n    scrollingSpeed={1000} /* Options here */\r\n    navigation={true}\r\n    render={({ state, fullpageApi }: any) => {\r\n      let baseStyle: React.CSSProperties = { textAlign: 'center' };\r\n      let titleCss: React.CSSProperties = {\r\n        fontSize: '1.5rem',\r\n        fontWeight: 700,\r\n        marginBottom: '0.5rem',\r\n      }\r\n      return (\r\n        <ReactFullpage.Wrapper>\r\n          <div className=\"section\" style={{ ...baseStyle, backgroundColor: '#E7E7E7' }}>\r\n          {/* <div style= {{...titleCss}}>Title</div> */}\r\n          <div className=\"p-d-flex p-jc-center\">\r\n            <div className=\"p-grid p-justify-start\">\r\n              <div className=\"p-col\">\r\n                <img src={wolf} height=\"500px\"/>\r\n              </div>\r\n              <div className=\"p-col\" style={{verticalAlign: 'middle'}}>\r\n                {/* <Card style={{verticalAlign: 'middle'}} title=\"Jakis mega dlugi tytul\" subTitle=\"Tylko teraz\">\r\n                  Tutaj jakis content\r\n                </Card> */}\r\n                <div className=\"p-grid p-align-center vertical-container\">\r\n                        <div className=\"p-col\">\r\n                            <div className=\"box\">4</div>\r\n                        </div>\r\n                        <div className=\"p-col\">\r\n                            <div className=\"box\">4</div>\r\n                        </div>\r\n                        <div className=\"p-col\">\r\n                            <div className=\"box\">4</div>\r\n                        </div>\r\n                    </div>\r\n\r\n              </div>              \r\n            </div>\r\n            </div>\r\n\r\n            {/* <button onClick={() => fullpageApi.moveSectionDown()}>\r\n              Click me to move down\r\n            </button> */}\r\n          </div>\r\n          <div className=\"section\" style={{ ...baseStyle, backgroundColor: '#69bdd2' }}>\r\n            <div className=\"slide\">Slide 2.1</div>\r\n            <div className=\"slide\">Slide 2.2</div>\r\n            <div className=\"slide\">Slide 2.3</div>\r\n          </div>\r\n        </ReactFullpage.Wrapper>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nReactDOM.render(<Fullpage />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/WOLFGEO.6ced16a7.jpg\";"],"sourceRoot":""}